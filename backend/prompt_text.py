gpt_role = "You are a teaching assistant built to assist students understand and learn lecture content.\
     You will be given the lecture content for context."

ai_mode = {
    "question": "I will ask you a question. Try to answer the question based off\
         of the lecture content that I provided to you earlier. Do not make the answers too\
             long. Keep them simple.",
    
    "quiz": 'Create a list of 5 multiple choice question on the given information. Each question should have 4 choices. Only 1\
        of the choices should be the correct answer to the question. The 3 other three choices should be incorrect. \
            You can format the output in the following way \
                [{"question": <The question text>, "1": <Text of the first option>, "2": <Text of the second option>, "3": <Text of the third option>, "4": <Text of the fourth option>, "answer": <The correct answer choice. This should just be a number from 1, 2, 3, 4>}] \
                    It should be in JSON format. In accordance with JSON, make sure all strings are enclosed in double quotes.',
    
    "notes": "Generate simple, yet comprehensive notes on the given topic that I can later use to study or review the topic."
}

context_data = {
    "arraylist": "Arrays are essential data structures used in computer programming to organize and manage collections of variables. They are particularly valuable when dealing with data of the same data type, \
        offering a structured way to access and manipulate elements within the collection. Each element in an array is assigned a unique index that indicates its position within the array. These indices begin at \
            0 and continue in a sequential order. Consequently, each stored value within an array is commonly referred to as an element. The length of an array, which is established at its creation, is of great significance,\
                 as it determines the maximum number of items the array can hold. This quantity is often referred to as the 'capacity' of the array, and it remains fixed throughout the array's existence. In Java, the length \
                     of an array, denoted as 'a.length,' can be accessed to determine its capacity. The cells within an array, 'a,' are numbered from 0 to 'a.length-1,' and a specific cell with index 'k' can be accessed using the syntax 'a[k].' \
        Arrays can be declared in various ways, either by using an array literal or an array declaration. The element type of an array can be any Java base type or class type. For example, given a capacity of 'N = 4,' an array can be declared\
             using an array literal as 'int[] myArray = {1, 3, 3, 2,' or an array declaration as 'int[] myArray = new int[4].' \
                 In addition to accommodating primitive data types, arrays can also store references to objects. For instance, an array can hold character elements 'S,' 'A,' 'M,' 'P,' 'L,' 'E,' or it can store references to objects like 'Rene,' 'Joseph,' 'Janet,' 'Jonas,' and 'Helen.' \
                     Array lists, on the other hand, serve as dynamic collections that store objects, as opposed to primitive data types. Arrays, in contrast, can accommodate both primitive data types and objects. When an array list becomes full, it dynamically resizes itself by creating a new, larger backing array and copying the contents from the old array into the new one. The resizing policy may vary depending on the implementation, with Java typically resizing the backing array to 1.5 times its original size. \
                         Adding an entry to an array requires making room for it by shifting forward the elements from 'myArray[i]' to 'myArray[n - 1],' where 'n' is the current size of the array. Conversely, to remove an entry 'e' at index 't,' the vacant space created by 'e' is filled by shifting backward the elements from 'board[i + 1]' to 'board[n - 1,' where 'n' is the current size of the array. These operations are performed according to the procedures 'Add(i, e)' and 'Remove(i)'. \
                             In summary, array lists are dynamic structures that exclusively store objects. They offer constant-time access to elements but have a linear-time complexity for inserting, searching, or removing items from positions other than the back of the array list. Array lists are often employed in applications such as tracking characters in an online game map, offering flexibility in handling and managing object-based data structures."
}


data = ['Arrays and Array List\nArrays and Array Lists\nSaikrishna Arcot\nM. Hudachek-Buswell\nJuly 18, 2020\n1Arrays and Array List\nArray Deﬁnition\n•Anarrayis a sequenced collection of variables all of the same\ntype. Every cellin an array has an indexdenoting its location\nwithin the array. The index uniquely refers to the value stored\nin that cell. The cells of an array, A, are numbered (or\nindexed) beginning with 0, 1, 2, and so on.•Each value stored in an array is often called an element of\nthat array.\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n2Arrays and Array List\nArray Deﬁnition\n•Anarrayis a sequenced collection of variables all of the same\ntype. Every cellin an array has an indexdenoting its location\nwithin the array. The index uniquely refers to the value stored\nin that cell. The cells of an array, A, are numbered (or\nindexed) beginning with 0, 1, 2, and so on.\n•Each value stored in an array is often called an element of\nthat array.\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n2Arrays and Array List\nArray Length and Capacity\n•Since the length of an array determines the maximum number\nof items that can be stored in the array, we refer to the length\nof an array as its capacity.The length of an array is\nestablished when the array is created, and the length is ﬁxed.•In Java, the length of an array named acan be accessed\nusing the syntax a.length . Thus, the cells of an array, a, are\nnumbered 0, 1, 2, and so on, up through a.length-1 , and\nthe cell with index kcan be accessed with syntax a[k].\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n3Arrays and Array List\nArray Length and Capacity\n•Since the length of an array determines the maximum number\nof items that can be stored in the array, we refer to the length\nof an array as its capacity.The length of an array is\nestablished when the array is created, and the length is ﬁxed.\n•In Java, the length of an array named acan be accessed\nusing the syntax a.length . Thus, the cells of an array, a, are\nnumbered 0, 1, 2, and so on, up through a.length-1 , and\nthe cell with index kcan be accessed with syntax a[k].\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n3Arrays and Array List\nArray Creation\n•There are a couple of ways to declare an array. One can use\nan array literal or an array declaration. The element type for\nthe array is any Java base type or class type.•Given a capacity of N = 4,\nArray literal: int[] myArray = {1, 3, 3, 2}\nArray declaration: int[] myArray = new int[4]\n4Arrays and Array List\nArray Creation\n•There are a couple of ways to declare an array. One can use\nan array literal or an array declaration. The element type for\nthe array is any Java base type or class type.\n•Given a capacity of N = 4,\nArray literal: int[] myArray = {1, 3, 3, 2}\nArray declaration: int[] myArray = new int[4]\n4Arrays and Array List\nArrays of Character or Object References\n•An array can store primitive elements, such as characters.\nS\n0\nA\n1\nM\n2\nP\n3\nL\n4\nE\n5•An array can also store references to objects.\n"Rene"\n "Joseph"\n "Janet"\n "Jonas"\n "Helen"\n0\n1\n2\n3\n4\n5Arrays and Array List\nArrays of Character or Object References\n•An array can store primitive elements, such as characters.\nS\n0\nA\n1\nM\n2\nP\n3\nL\n4\nE\n5\n•An array can also store references to objects.\n"Rene"\n "Joseph"\n "Janet"\n "Jonas"\n "Helen"\n0\n1\n2\n3\n4\n5Arrays and Array List\nArray Lists\n•An array can be used as a backing structure for a list. In\nessence, array lists store objects and not primitive data types.\nWhereas, arrays can store both, primitives and objects.•When an array list is full, it dynamically resizes to a larger\narray list. Typically, a new, larger backing array is created and\nthe content is copied from the old array to the new array.\n•The resizing policy depends on the implementation. Java’s\nimplementation resizes the backing array to 1.5 times the\noriginal size.\n6Arrays and Array List\nArray Lists\n•An array can be used as a backing structure for a list. In\nessence, array lists store objects and not primitive data types.\nWhereas, arrays can store both, primitives and objects.\n', 'rrays and Array List\nArrays of Character or Object References\n•An array can store primitive elements, such as characters.\nS\n0\nA\n1\nM\n2\nP\n3\nL\n4\nE\n5\n•An array can also store references to objects.\n"Rene"\n "Joseph"\n "Janet"\n "Jonas"\n "Helen"\n0\n1\n2\n3\n4\n5Arrays and Array List\nArray Lists\n•An array can be used as a backing structure for a list. In\nessence, array lists store objects and not primitive data types.\nWhereas, arrays can store both, primitives and objects.•When an array list is full, it dynamically resizes to a larger\narray list. Typically, a new, larger backing array is created and\nthe content is copied from the old array to the new array.\n•The resizing policy depends on the implementation. Java’s\nimplementation resizes the backing array to 1.5 times the\noriginal size.\n6Arrays and Array List\nArray Lists\n•An array can be used as a backing structure for a list. In\nessence, array lists store objects and not primitive data types.\nWhereas, arrays can store both, primitives and objects.\n•When an array list is full, it dynamically resizes to a larger\narray list. Typically, a new, larger backing array is created and\nthe content is copied from the old array to the new array.•The resizing policy depends on the implementation. Java’s\nimplementation resizes the backing array to 1.5 times the\noriginal size.\n6Arrays and Array List\nArray Lists\n•An array can be used as a backing structure for a list. In\nessence, array lists store objects and not primitive data types.\nWhereas, arrays can store both, primitives and objects.\n•When an array list is full, it dynamically resizes to a larger\narray list. Typically, a new, larger backing array is created and\nthe content is copied from the old array to the new array.\n•The resizing policy depends on the implementation. Java’s\nimplementation resizes the backing array to 1.5 times the\noriginal size.\n6Arrays and Array List\nAdding an Entry\n•To add an entry einto array myArray at index i, we need to\nmake room for it by shifting forward the n−ientries\nmyArray[i], ..., myArray[n - 1] .\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nIn this example, the capacity of myArray is 16 and size of\nmyArray is n = 10. So adding at i = 6, shifts myArray\nelements 6-9 to elements 7-10.\n7Arrays and Array List\nAdding an Entry\n•To add an entry einto array myArray at index i, we need to\nmake room for it by shifting forward the n−ientries\nmyArray[i], ..., myArray[n - 1] .\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nIn this example, the capacity of myArray is 16 and size of\nmyArray is n = 10. So adding at i = 6, shifts myArray\nelements 6-9 to elements 7-10.\n7Arrays and Array List\nAdding an Entry\n•To add an entry einto array myArray at index i, we need to\nmake room for it by shifting forward the n−ientries\nmyArray[i], ..., myArray[n - 1] .\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nIn this example, the capacity of myArray is 16 and size of\nmyArray is n = 10. So adding at i = 6, shifts myArray\nelements 6-9 to elements 7-10.\n7Arrays and Array List\nAdding an Entry\nprocedure Add(i,e)\nifsize>=arr.lenthen\nRegrow the array\nend if\nforj←size−1,ido\narr[j+1]←arr[j]\nend for\narr[i]←e\nsize←size+1\nend procedure\n8Arrays and Array List\nRemoving an Entry\n•To remove an entry eat index t, we need to ﬁll the hole left\nbyeby shifting backward the n−i−1 elements board[i +\n1], ..., board[n - 1] .\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nIn this example, the capacity of myArray is 16 and size of\nmyArray is n = 11. So removing at i = 6, shifts myArray\nelements 7-10 to elements 6-9.\n9Arrays and Array List\nRemoving an Entry\n•To remove an entry eat index t, we need to ﬁll the hole left\nbyeby shifting backward the n−i−1 elements board[i +\n1], ..., board[n - 1] .\n0\n1\n2\n3\n4\n5\n6\n7\n8', '\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nIn this example, the capacity of myArray is 16 and size of\nmyArray is n = 10. So adding at i = 6, shifts myArray\nelements 6-9 to elements 7-10.\n7Arrays and Array List\nAdding an Entry\nprocedure Add(i,e)\nifsize>=arr.lenthen\nRegrow the array\nend if\nforj←size−1,ido\narr[j+1]←arr[j]\nend for\narr[i]←e\nsize←size+1\nend procedure\n8Arrays and Array List\nRemoving an Entry\n•To remove an entry eat index t, we need to ﬁll the hole left\nbyeby shifting backward the n−i−1 elements board[i +\n1], ..., board[n - 1] .\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nIn this example, the capacity of myArray is 16 and size of\nmyArray is n = 11. So removing at i = 6, shifts myArray\nelements 7-10 to elements 6-9.\n9Arrays and Array List\nRemoving an Entry\n•To remove an entry eat index t, we need to ﬁll the hole left\nbyeby shifting backward the n−i−1 elements board[i +\n1], ..., board[n - 1] .\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nIn this example, the capacity of myArray is 16 and size of\nmyArray is n = 11. So removing at i = 6, shifts myArray\nelements 7-10 to elements 6-9.\n9Arrays and Array List\nRemoving an Entry\n•To remove an entry eat index t, we need to ﬁll the hole left\nbyeby shifting backward the n−i−1 elements board[i +\n1], ..., board[n - 1] .\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nIn this example, the capacity of myArray is 16 and size of\nmyArray is n = 11. So removing at i = 6, shifts myArray\nelements 7-10 to elements 6-9.\n9Arrays and Array List\nRemoving an Entry\nprocedure Remove (i)\nitem←arr[i]\narr[i]←NULL\nforj←i,size−2do\narr[j]←arr[j+1]\nend for\nsize←size−1\nreturnitem\nend procedure\n10Arrays and Array List\nArray List Summary and Complexity\n•Array lists are dynamic and store objects.•Accessing elements is a cost of O(1), constant time\n•Inserting, searching or removing from anywhere other than the\nback of the array list is a cost of O(n), linear time\n•Array lists are used in tracking characters in an online game\nmap\n11Arrays and Array List\nArray List Summary and Complexity\n•Array lists are dynamic and store objects.\n•Accessing elements is a cost of O(1), constant time•Inserting, searching or removing from anywhere other than the\nback of the array list is a cost of O(n), linear time\n•Array lists are used in tracking characters in an online game\nmap\n11Arrays and Array List\nArray List Summary and Complexity\n•Array lists are dynamic and store objects.\n•Accessing elements is a cost of O(1), constant time\n•Inserting, searching or removing from anywhere other than the\nback of the array list is a cost of O(n), linear time•Array lists are used in tracking characters in an online game\nmap\n11Arrays and Array List\nArray List Summary and Complexity\n•Array lists are dynamic and store objects.\n•Accessing elements is a cost of O(1), constant time\n•Inserting, searching or removing from anywhere other than the\nback of the arrxay list is a cost of O(n), linear time\n•Array lists are used in tracking characters in an online game\nmap\n11']
